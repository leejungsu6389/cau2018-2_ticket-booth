#   Ticket Booth - capstone design -2018 2학기 -
#   traffic counting program


import numpy as np
import cv2
import math

DISTANCE = 90.0 # Tracking record와 DISTANCE 만큼 가까우면 연속된 물체로 간주함
DEADLINE = 10 # Tracking record가 DEADLINE 횟수의 시간(프레임) 동안 갱신이 이루어지지 않으면 해제시킴

DOOR_LINE_X = 200 # DOOR LINE의 위치
LINE_TERM = 50 # DOOR LINE 양 옆의 보조선 간의 거리

OUT_LINE = DOOR_LINE_X + LINE_TERM # 바깥 라인 보조선 (안쪽에서 생성된 물체가 이 라인을 지나가면 카운트)
IN_LINE = DOOR_LINE_X - LINE_TERM # 안쪽 라인 보조선 (바깥에서 생성된 물체가 이 라인을 지나가면 카운트)

ifTWO = 150 # 바운딩박스의 높이가 ifTWO보다 크면 두명으로 간주
cap = cv2.VideoCapture("C:\\Users\\kimin\\OneDrive\\바탕 화면\\sample.mp4")  #  비디오 파일을 연결

bgSub = cv2.createBackgroundSubtractorKNN(dist2Threshold=400,detectShadows=False) # 백그라운드 제거함수 객체

frame_sz = (400,200) # resize 될 프레임 사이즈
kernelOp = np.ones((3,3),np.uint8) # Opening 연산의 필터입니다.
kernelCl = np.ones((9,9),np.uint8) # Closing 연산의 필터 입니다.
count = 0 # 프레임 횟수
Count_in = 0 # 카운트 변수. 안으로 들어온 사람을 카운트
Count_out = 0 #카운트 변수, 밖으로 나간 사람을 카운트
cv2.namedWindow("Demo",0)
object_id  = [[],[],[],[]] # 트랙킹 리스트 4개 입니다.
object_height = [[],[],[],[]] # 각각의 트래킹 리스트에 대한 바운딩박스의 크기(높이) 리스트입니다.
object_id_timer = [0,0,0,0] #각각의 트래킹 리스트가 갱신이 되지 않고 지나간 프레임 횟수. DEADLINE 보다 크면 해당 리스트 클리어
object_enum = [0,0,0,0] #안에서 시작된 물체와 밖에서 시작된 물체를 구분( 안 : 1 , 밖 : 2)
while (cap.isOpened()): # 비디오가 열려있는 동안
    (ret, frame) = cap.read()  # read a frame
    try:
        count = count + 1
        for i in range(0, 4): # 트랙킹 리스트 관련. DEADLINE 까지 갱신되지 않은 리스트 클리어
            if object_id_timer[i] > DEADLINE:
                print(i ," is deleted")
                object_id[i].clear()
                object_height[i].clear()
                object_id_timer[i] = 0
                object_enum[i] = 0

        frame = cv2.resize(frame, frame_sz) # 프레임 리사이징
        original = frame #추후의 연산에 의해 변경되기 전의 프레임을 original에 보존
        frame = cv2.cvtColor(frame,cv2.COLOR_RGB2GRAY) # 프레임 흑백으로 변경
        frame = cv2.GaussianBlur(frame,(5,5),0) # 5by5 필터로 블러링
        frame = bgSub.apply(frame) # 백그라운드 제거 (움직이는 물체들만 취함)
        cv2.threshold(frame,230,255,cv2.THRESH_BINARY) # 제거된 백그라운드 중 강한 신호들만을 취함(노이즈 제거)
        frame = cv2.morphologyEx(frame,cv2.MORPH_OPEN,kernelOp) # 오프닝 연산
        frame = cv2.morphologyEx(frame, cv2.MORPH_CLOSE, kernelCl) # 클로징 연산
        frame = cv2.morphologyEx(frame,cv2.MORPH_OPEN,kernelOp) # 오프닝 연산
        frame = cv2.morphologyEx(frame, cv2.MORPH_CLOSE, kernelCl) # 클로징 연산
        _, contours, hierarchy = cv2.findContours(frame,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)
        # 해당 프레임에서 콘투어를 찾아 contours에 저장

        obj_isUpd = [False, False, False, False] #해당 프레임에서 업데이트가 이루어지는지 체크
        for cnt in contours: # 각각의 contour에 대하여
            area = cv2.contourArea(cnt)
            if area>5000: #해당 콘투어의 면적이 5000보다 크면
                M = cv2.moments(cnt)
                cx = int(M['m10'] / M['m00']) #contour 중심점의 x좌표 구함
                cy = int(M['m01'] / M['m00']) #contour 중심점의 y좌표 구함
                x, y, w, h = cv2.boundingRect(cnt) # 바운딩 박스를 치기 위한 정보 구해옴.
                checked = False
                for i in range(0, 4): #가까운 트랙깅 리스트를 찾는 반복문입니다.
                    if len(object_id[i]) != 0:
                        check = object_id[i].pop()
                        object_id[i].append(check)
                        dist = math.sqrt((cx - check[0]) * (cx - check[0]) + (cy - check[1]) * (cy - check[1]))
                        if dist < DISTANCE: #리스트와 해당 contour 와의 거리가 충분히 작으면 해당 리스트에 집어넣음
                            print(i, " is used");
                            object_id[i].append((cx, cy))
                            object_height[i].append((h))
                            object_id_timer[i] = 0
                            obj_isUpd[i] = True
                            checked = True
                            break

                if checked == False: #가까운 리스트를 찾지 못했으면 새로운 리스트를 생성
                    for j in range(0, 4): #사용되지 않고있는 리스트 탐색
                        if len(object_id[j]) == 0: # 사용되지 않고있는 리스트에 집어넣습니다.
                            object_id[j].append((cx, cy))
                            object_height[j].append((h))
                            object_id_timer[j] = 0
                            obj_isUpd[j] = True
                            if cx < DOOR_LINE_X:
                                object_enum[j] = 1
                            else:
                                object_enum[j] = 2
                            break

        for i in range(0, 4): # 트랙킹 레코드를 이미지에 그립니다.
            if len(object_id[i]) > 1:
                for j in range(0, len(object_id[i]) - 1):
                    if object_enum[i] == 1: # 안에서 시작된 물체 그림
                        original = cv2.line(original, object_id[i][j], object_id[i][j + 1], (0, 0, 255), 3)
                    elif object_enum[i] == 2: # 밖에서 시작된 물체 그림
                        original = cv2.line(original, object_id[i][j], object_id[i][j + 1], (255, 255, 0), 3)

        for i in range(0, 4):
            if obj_isUpd[i] == False: # 현재 프레임에서 갱신되지 않은 리스트 timer 1씩 증가시킴
                object_id_timer[i] = object_id_timer[i] + 1
            elif object_enum[i] == 1: # 안에서 시작된 물체중에서 밖으로 넘어간거 있으면 카운팅, 트랙킹리스트 반환
                curpos = object_id[i].pop()
                object_id[i].append(curpos)
                object_height[i].append((h))
                if curpos[0] > OUT_LINE:
                    Count_out = Count_out + 1
                    thisH = object_height[i].pop()
                    object_height[i].append(thisH)
                    if thisH > ifTWO: # 두명크기로 간주되는거는 한번 더 카운트
                        Count_out = Count_out + 1
                    object_enum[i] = 0
                    object_id_timer[i] = 0
                    object_id[i].clear()
                    object_height[i].clear()
            elif object_enum[i] == 2: # 밖에서 시작된 물체중에 안으로 들어온거 있으면 카운팅, 트랙킹리스트 반환
                curpos = object_id[i].pop()
                object_id[i].append(curpos)
                object_height[i].append((h))
                if curpos[0] < IN_LINE: # 두명크기로 간주되는거는 한번 더 카운트
                    Count_in = Count_in + 1
                    thisH = object_height[i].pop()
                    object_height[i].append(thisH)
                    if thisH > ifTWO:
                        Count_in = Count_in + 1
                    object_enum[i] = 0
                    object_id_timer[i] = 0
                    object_id[i].clear()
                    object_height[i].clear()

        cIN = str(Count_in)
        cOUT = str(Count_out)
        original = cv2.line(original, (DOOR_LINE_X, 0), (DOOR_LINE_X, 300), (0, 0, 0), 3) #door line 그립니다
        original = cv2.line(original, (OUT_LINE, 0), (OUT_LINE, 300), (255, 255, 255), 1) #door line 보조선 그립니다.
        original = cv2.line(original, (IN_LINE, 0), (IN_LINE, 300), (255, 255, 255), 1) #door line 보조선 그립니다
        original = cv2.putText(original, "INDOOR", (10, 180), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2) # 글씨를 그립니다.
        original = cv2.putText(original, "OUTDOOR", (250, 180), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2) # 글씨를 그립니다.
        original = cv2.putText(original, "IN:", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2) # 글씨를 그립니다.
        original = cv2.putText(original, cIN, (70, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2) # 안으로 들어온 사람 횟수를 그립니다.
        original = cv2.putText(original, "OUT:", (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
        original = cv2.putText(original, cOUT, (80, 70), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)# 밖으로 나간 사람 횟수를 그립니다.
        cv2.imshow("Demo", original) # 이미지를 출력합니다.


    except: # 오류발생시 프로그램 종료
        print("EOF")
        break
    k = cv2.waitKey(30)
    if k > 0:
        a = int(input("press"))
        if a== 1:
            continue
cap.release()
cv2.destroyAllWindows()
